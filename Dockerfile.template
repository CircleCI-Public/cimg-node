# vim:set ft=dockerfile:
#
# `FROM` value will be:
#
# cimg/base:stable, cimg/base:stable-node for monthly releases
# cimg/base:edge, cimg/base:edge-node for commits to master or any other branch

FROM %%BASE_ORG_BASE_IMAGE_BASE_TAG%%

LABEL maintainer="CircleCI Community & Partner Engineering Team <community-partner@circleci.com>"

# Set default shell for building image
SHELL ["/bin/bash", "-exo", "pipefail", "-c"]

ENV DEBIAN_FRONTEND noninteractive
ENV NODE_VERSION %%MAIN_VERSION%%

# Install Node
RUN curl --show-error --location --fail --retry 3 \
	# grab Node.js release keys
	https://raw.githubusercontent.com/nodejs/node/master/README.md | \
	grep -E '[A-Z0-9]{40}' | \
	sed -E 's/gpg --keyserver pool.sks-keyservers.net --recv-keys //g' | \
	sed -E 's/(`|\$ )//g' > NODEJS_TRUSTED_RELEASE_KEYS \
	# set keyservers to use
	&& echo "hkp://p80.pool.sks-keyservers.net:80" >> KEYSERVERS \
	&& echo "hkp://ipv4.pool.sks-keyservers.net" >> KEYSERVERS \
	&& echo "hkp://pgp.mit.edu:80" >> KEYSERVERS \
	&& echo "hkps://ha.pool.sks-keyservers.net" >> KEYSERVERS \
	&& echo "hkp://keyserver.ubuntu.com:80" >> KEYSERVERS \
	# import release keys
	&& while read key; \
		do for keyserver in $(cat KEYSERVERS); \
			do tempName=$(mktemp) \
			&& gpg --status-fd 1 \
				--keyserver "$keyserver" --keyserver-options "timeout=1" \
				--recv-keys "$key" 1> "$tempName" || true \
			&& if [[ $(grep "^\[GNUPG\:\] IMPORT_OK "[[:digit:]]*" "$key"$" $tempName \
				&& grep "^\[GNUPG\:\] IMPORT_RES 1" "$tempName") ]]; then \
				echo "Success! Imported $key from $keyserver" && \
				break; \
			else \
				continue; \
			fi; \
		done \
	done < NODEJS_TRUSTED_RELEASE_KEYS \
	&& rm -f NODEJS_TRUSTED_RELEASE_KEYS KEYSERVERS \
	# download encrypted shasums file
	&& curl -O --show-error --location --fail --retry 3 \
		"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
	# decrypt shasums file
	&& gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc && rm -f SHASUMS256.txt.asc \
	# download/install node
	&& curl -O --show-error --location --fail --retry 3 \
		"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.gz" \
	# verify node tar via shasum256
	&& grep "node-v$NODE_VERSION-linux-x64.tar.gz" SHASUMS256.txt | sha256sum -c - && rm -f SHASUMS256.txt \
	&& tar -xzf "node-v$NODE_VERSION-linux-x64.tar.gz" -C /usr/local \
		--strip-components=1 --no-same-owner \
	&& rm -f "node-v$NODE_VERSION-linux-x64.tar.gz" \
	&& if [[ ! -e /usr/local/bin/nodejs ]]; then \
		ln -s /usr/local/bin/node /usr/local/bin/nodejs; \
	fi \
	# test/verify version
	&& command -v node \
	&& command -v npm \
	&& node --version | grep "$NODE_VERSION" \
	&& npm --version

# Install Yarn
RUN YARN_VERSION=$(curl --silent --show-error \
  --location --fail --retry 3 \
  https://api.github.com/repos/yarnpkg/yarn/releases/latest | \
  grep tag_name | cut -d '"' -f 4 | \
  cut -d 'v' -f 2) \
	&& curl -L -o yarn.tar.gz "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" \
	&& tar -xzf yarn.tar.gz -C /opt/ \
	&& rm yarn.tar.gz \
	&& ln -s /opt/yarn-v${YARN_VERSION}/bin/yarn /usr/local/bin/yarn \
	&& ln -s /opt/yarn-v${YARN_VERSION}/bin/yarnpkg /usr/local/bin/yarnpkg \
	&& command -v yarn \
	&& yarn --version | grep "$YARN_VERSION"

# Set default shell for users
SHELL ["/bin/bash", "-c"]
