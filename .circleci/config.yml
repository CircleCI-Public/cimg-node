version: 2.1

orbs:
  cimg: circleci/cimg@0.3.3
  aws-cli: circleci/aws-cli@4.1.0
  slack: circleci/slack@4.12.1
  gh: circleci/github-cli@2.2.0

parameters:
  cron:
    type: boolean
    default: false

workflows:
  automated-wf:
      when: << pipeline.parameters.cron >>
      jobs:
        - check-feed:
            context:
              - cimg-publishing
  main-wf:
    when:
      not: << pipeline.parameters.cron >>
    jobs:
      - cimg-build:
          docker-namespace: ccitest
          docker-repository: node
          target-namespace: ccitest
          target-repository: cimg-orb
          registry-dir: /tmp/registry
          organization: circleci-images
          filters:
            branches:
              ignore:
                - main
          post-steps:
            - slack/notify:
                branch_pattern: release-v.+
                event: pass
                mentions: "@jalexchen"
                template: basic_success_1
          context: cimg-publishing

jobs:
  check-feed:
    docker:
      - image: cimg/base:2023.01
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f8:07:0f:f6:b5:eb:57:ae:be:4d:2f:2d:be:70:8f:ff"
      - run:
          name: SSH config to pull and push project
          command: |
            ssh-add -D
            ssh-add ~/.ssh/id_rsa_f8070ff6b5eb57aebe4d2f2dbe708fff
            ssh-keygen -f ~/.ssh/id_rsa_f8070ff6b5eb57aebe4d2f2dbe708fff -y > ~/.ssh/id_rsa_f8070ff6b5eb57aebe4d2f2dbe708fff.pub
            echo "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFHZoU4/njm1peseKCHfY4igdb4cbVwK16ADNlIoj6Ch secops+cpe-image-bot@circleci.com" > ~/.ssh/allowed_signers
      - run:
          name: Run git config
          command: |
            cat \<<'EOF' >> ~/githelper.sh
              #!/usr/bin/env bash
              echo username=$GIT_USERNAME
              echo password=$IMAGE_BOT_TOKEN
            EOF

            git config --global user.email "secops+cpe-image-bot@circleci.com"
            git config --global user.name "cpe-image-bot"
            git config --global user.signingkey "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFHZoU4/njm1peseKCHfY4igdb4cbVwK16ADNlIoj6Ch"
            git config --global gpg.ssh.allowedSignersFile ~/.ssh/allowed_signers
            git config --global url."https://github.com".insteadOf ssh://git@github.com
            git config --global url."https://github.com/".insteadOf git@github.com:
            git config --global credential.helper "/bin/bash ~/githelper.sh"
            git config --global gpg.format ssh
            git config --global commit.gpgsign true
            git submodule sync
      - gh/setup:
          token: IMAGE_BOT_TOKEN
      - run:
          name: Run version update script
          command: |
            sudo chmod +x nodeFeed.sh
            git submodule update --init --recursive
            ./nodeFeed.sh

  cimg-build:
    docker:
      - image: ferriswh33l/sign:2023.10
    parameters:
      docker-namespace:
        type: string
      docker-repository:
        type: string
      target-namespace:
        type: string
      target-repository:
        type: string
      registry-dir:
        type: string
      organization:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - cimg/build-images:
          docker-namespace: <<parameters.docker-namespace>>
          docker-repository: <<parameters.docker-repository>>
      - run:
          name: Capture metadata
          command: |
            (
              echo "export registryDir=<<parameters.registry-dir>>" >> $BASH_ENV
              echo "export namespace=<<parameters.docker-namespace>>" >> $BASH_ENV
              echo "export repository=<<parameters.docker-repository>>" >> $BASH_ENV
            )
            source GEN-CHECK
            source $BASH_ENV
            cimg capture "<<parameters.docker-namespace>>" "<<parameters.docker-repository>>" "$registryDir"

            echo "{}" > "$registryDir/metadata.json"
            for file in $registryDir/*-manifest.json; do
              tag=$(basename ${file%-*})
              jq --arg tag "$tag" --slurpfile input "$file" '. += { ($tag): $input }' "$registryDir/metadata.json" > tmp.json && mv tmp.json "$registryDir/metadata.json"
            done
      - aws-cli/setup:
          region: ${AWS_DEFAULT_REGION}
          role_arn: arn:aws:iam::483285841698:role/cpe-images-bucket-write
          role_session_name: "write-to-s3"
      - run:
          name: Copy to s3
          command: |
            cimg copy "$S3_BUCKET_NAME" "<<parameters.docker-namespace>>-<<parameters.docker-repository>>"
      - aws-cli/setup:
          region: ${AWS_DEFAULT_REGION}
          role_arn: arn:aws:iam::483285841698:role/cpe-kms-sign
          role_session_name: "sign-docker-images"
      - run:
          name: Sign and copy images
          command: |
            echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USER" --password-stdin

            cimg operate sign "$KMS_KEY" "<<parameters.organization>>"
            cimg operate copy "<<parameters.target-namespace>>" "<<parameters.target-repository>>"
      - aws-cli/setup:
          region: ${AWS_DEFAULT_REGION}
          role_arn: arn:aws:iam::483285841698:role/cpe-images-bucket-read
          role_session_name: "read-from-s3"
      - run:
          name: Verify signatures
          command: |
            touch "$registryDir/validation.txt"
            validation=$(cat $registryDir/validation.txt)

            cimg operate validate "<<parameters.target-namespace>>" "<<parameters.target-repository>>"
            cimg operate verify "$KMS_KEY"

            if [[ -z $validation ]]; then
              echo "Manifest check succeeded"
            else
              echo "Please check $registryDir/verification.txt for differences in manifests"
              exit 1
            fi
