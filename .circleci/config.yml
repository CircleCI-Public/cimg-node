version: 2.1

orbs:
  cimg: circleci/cimg@dev:d365891f2c6242fdc77cd40f9bf4589dcaa3d162
  aws-cli: circleci/aws-cli@4.1.0
  slack: circleci/slack@4.12.1
  gh: circleci/github-cli@2.2.0

aws-image-tag:
  aws-image: &aws-image cimg/aws:2023.07.1

parameters:
  cron:
    type: boolean
    default: false
  check_all:
    type: boolean
    default: false

workflows:
  automated-wf:
      when: << pipeline.parameters.cron >>
      jobs:
        - check-feed:
            context:
              - cimg-publishing
  main-wf:
    when:
      not: << pipeline.parameters.cron >>
    jobs:
      - cimg-build:
          docker-namespace: ccitest
          docker-repository: node
          filters:
            branches:
              ignore:
                - main
          context: cimg-publishing
      - cimg-staging:
          docker-namespace: ccitest
          docker-repository: node
          target-namespace: ccitest
          target-repository: cimg-orb
          organization: circleci-images
          filters:
            branches:
              ignore:
                - main
          requires:
            - cimg-build
          context: cimg-publishing
      - cimg-verify:
          docker-namespace: ccitest
          docker-repository: node
          target-namespace: ccitest
          target-repository: cimg-orb
          filters:
            branches:
              ignore:
                - main
          requires:
            - cimg-staging
          post-steps:
            - slack/notify:
                branch_pattern: release-v.+
                event: pass
                mentions: "@jalexchen"
                template: basic_success_1
          context: cimg-publishing
      - cimg-deploy:
          docker-namespace: ccitest
          docker-repository: node
          target-namespace: cimg
          target-repository: node
          organization: circleci-images
          filters:
            branches:
              only:
                - main
          post-steps:
            - slack/notify:
                branch_pattern: main
                event: fail
                mentions: "@images"
                template: basic_fail_1
          context: cimg-publishing

jobs:
  check-feed:
    docker:
      - image: cimg/base:2023.01
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f8:07:0f:f6:b5:eb:57:ae:be:4d:2f:2d:be:70:8f:ff"
      - run:
          name: SSH config to pull and push project
          command: |
            ssh-add -D
            ssh-add ~/.ssh/id_rsa_f8070ff6b5eb57aebe4d2f2dbe708fff
            ssh-keygen -f ~/.ssh/id_rsa_f8070ff6b5eb57aebe4d2f2dbe708fff -y > ~/.ssh/id_rsa_f8070ff6b5eb57aebe4d2f2dbe708fff.pub
            echo "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFHZoU4/njm1peseKCHfY4igdb4cbVwK16ADNlIoj6Ch secops+cpe-image-bot@circleci.com" > ~/.ssh/allowed_signers
      - run:
          name: Run git config
          command: |
            cat \<<'EOF' >> ~/githelper.sh
              #!/usr/bin/env bash
              echo username=$GIT_USERNAME
              echo password=$IMAGE_BOT_TOKEN
            EOF

            git config --global user.email "secops+cpe-image-bot@circleci.com"
            git config --global user.name "cpe-image-bot"
            git config --global user.signingkey "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFHZoU4/njm1peseKCHfY4igdb4cbVwK16ADNlIoj6Ch"
            git config --global gpg.ssh.allowedSignersFile ~/.ssh/allowed_signers
            git config --global url."https://github.com".insteadOf ssh://git@github.com
            git config --global url."https://github.com/".insteadOf git@github.com:
            git config --global credential.helper "/bin/bash ~/githelper.sh"
            git config --global gpg.format ssh
            git config --global commit.gpgsign true
            git submodule sync
      - gh/setup:
          token: IMAGE_BOT_TOKEN
      - run:
          name: Run version update script
          command: |
            sudo chmod +x nodeFeed.sh
            git submodule update --init --recursive
            ./nodeFeed.sh

  cimg-build:
    docker:
      - image: *aws-image
    parameters:
      docker-namespace:
        type: string
      docker-repository:
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - cimg/build-images:
          docker-namespace: <<parameters.docker-namespace>>
          docker-repository: <<parameters.docker-repository>>
      - cimg/capture-metadata:
          docker-namespace: <<parameters.docker-namespace>>
          docker-repository: <<parameters.docker-repository>>
      - aws-cli/setup:
          region: ${AWS_DEFAULT_REGION}
          role_arn: arn:aws:iam::483285841698:role/cpe-images-bucket-write
          role_session_name: "write-to-s3"
      - cimg/copy-to-s3:
          docker-namespace: cimg
          docker-repository: cimg-orb

  cimg-staging:
    docker:
      - image: *aws-image
    parameters:
      docker-namespace:
        type: string
      docker-repository:
        type: string
      target-namespace:
        type: string
      target-repository:
        type: string
      organization:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/registry
      - aws-cli/setup:
          region: ${AWS_DEFAULT_REGION}
          role_arn: arn:aws:iam::483285841698:role/cpe-kms-sign
          role_session_name: "sign-docker-images"
      - cimg/sign-images:
          docker-namespace: <<parameters.docker-namespace>>
          docker-repository: <<parameters.docker-repository>>
          organization: <<parameters.organization>>
      - cimg/copy-images:
          docker-namespace: <<parameters.docker-namespace>>
          docker-repository: <<parameters.docker-repository>>
          target-namespace: <<parameters.target-namespace>>
          target-repository: <<parameters.target-namespace>>

  cimg-verify:
    docker:
      - image: *aws-image
    parameters:
      docker-namespace:
        type: string
      docker-repository:
        type: string
      target-namespace:
        type: string
      target-repository:
        type: string
    steps:
      - checkout
      - aws-cli/setup:
          region: ${AWS_DEFAULT_REGION}
          role_arn: arn:aws:iam::483285841698:role/cpe-images-bucket-read
          role_session_name: "read-from-s3"
      - when:
          condition:
            not: <<pipeline.parameters.check_all>>
          steps:
            - attach_workspace:
                at: /tmp/registry
            - cimg/verify-signature:
                docker-namespace: <<parameters.docker-namespace>>
                docker-repository: <<parameters.docker-repository>>
                target-namespace: <<parameters.target-namespace>>
                target-repository: <<parameters.target-namespace>>
      - when:
          condition: <<pipeline.parameters.check_all>>
          steps:
            - cimg/capture-metadata:
                docker-namespace: <<parameters.docker-namespace>>
                docker-repository: <<parameters.docker-repository>>
            - cimg/verify-all-signatures:
                docker-namespace: <<parameters.docker-namespace>>
                docker-repository: <<parameters.docker-repository>>

  cimg-deploy:
    docker:
      - image: *aws-image
    parameters:
      docker-namespace:
        type: string
      docker-repository:
        type: string
      target-namespace:
        type: string
      target-repository:
        type: string
      organization:
        type: string
    steps:
      - checkout
      - run:
          name: Check if release commit
          command: |
            if ! git log -1 --pretty=%s | grep "\[release]\"; then
              echo "Not a release commit. Skipping publishing"
              circleci step halt
            fi
      - cimg/capture-metadata:
          docker-namespace: <<parameters.docker-namespace>>
          docker-repository: <<parameters.docker-repository>>
      - aws-cli/setup:
          region: ${AWS_DEFAULT_REGION}
          role_arn: arn:aws:iam::483285841698:role/cpe-kms-sign
          role_session_name: "sign-docker-images"
      - cimg/copy-images:
          docker-namespace: <<parameters.docker-namespace>>
          docker-repository: <<parameters.docker-repository>>
          target-namespace: <<parameters.target-namespace>>
          target-repository: <<parameters.target-namespace>>
      - cimg/sign-images:
          docker-namespace: <<parameters.docker-namespace>>
          docker-repository: <<parameters.docker-repository>>
          organization: <<parameters.organization>>
